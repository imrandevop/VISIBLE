# apps/profiles/serializers/role_switch_serializers.py
"""
Role switching serializers.
"""
from rest_framework import serializers
from apps.profiles.models import UserProfile
from django.utils import timezone

class RoleSwitchSerializer(serializers.Serializer):
    """
    Serializer for switching user roles between seeker and provider.

    Validates and processes role switching requests while ensuring:
    - User has no active work orders
    - User is not currently active for work (if provider)
    - Target role is valid
    - Only requires new_user_type field
    """
    new_user_type = serializers.ChoiceField(
        choices=['seeker', 'provider'],
        required=True,
        help_text="Target user type to switch to"
    )

    def validate(self, attrs):
        """Validate role switch request"""
        from apps.profiles.utils import can_switch_role

        request = self.context.get('request')
        user_profile = request.user.profile

        new_user_type = attrs.get('new_user_type')

        # Check if switching to same role
        if user_profile.user_type == new_user_type:
            raise serializers.ValidationError({'error': f'You are already a {new_user_type}.'})

        # Validate new_user_type value
        if new_user_type not in ['seeker', 'provider']:
            raise serializers.ValidationError({'error': 'Invalid user type. Must be either seeker or provider.'})

        # Check if user can switch roles (no active work orders, etc.)
        can_switch, reason = can_switch_role(user_profile)
        if not can_switch:
            raise serializers.ValidationError({'error': reason})

        # Store user_profile in validated data for use in save()
        attrs['user_profile'] = user_profile

        return attrs

    def save(self):
        """Perform the role switch"""
        from django.utils import timezone
        from apps.profiles.models import RoleSwitchHistory, Wallet

        user_profile = self.validated_data['user_profile']
        new_user_type = self.validated_data['new_user_type']

        # Store previous role
        previous_user_type = user_profile.user_type

        # Update user profile
        user_profile.previous_user_type = previous_user_type
        user_profile.user_type = new_user_type
        user_profile.role_switch_count += 1
        user_profile.last_role_switch_date = timezone.now()

        # Handle role-specific setup
        if new_user_type == 'provider':
            # Keep existing service_type (it's preserved from when they were provider before)
            # Generate provider_id if not exists (will be auto-generated by save method)
            # Create wallet if it doesn't exist
            if not hasattr(user_profile, 'wallet'):
                Wallet.objects.create(user_profile=user_profile)
        elif new_user_type == 'seeker':
            # Create wallet for seeker if it doesn't exist
            if not hasattr(user_profile, 'wallet'):
                Wallet.objects.create(user_profile=user_profile)

        # Set is_active_for_work to False when switching roles
        user_profile.is_active_for_work = False

        # Save the profile first
        user_profile.save()

        # Handle profile completion based on role switch direction
        if new_user_type == 'provider' and previous_user_type == 'seeker':
            # Preserve can_access_app when switching from seeker to provider
            # They already had access as seeker, so maintain it while they complete provider profile
            user_profile.profile_complete = False  # They need to complete provider-specific requirements
            user_profile.can_access_app = True     # But still allow app access
            user_profile.save(update_fields=['profile_complete', 'can_access_app'])
        else:
            # For other role switches (provider â†’ seeker, or first-time setup), use normal completion check
            user_profile.check_profile_completion()

        # Create history record
        RoleSwitchHistory.objects.create(
            user_profile=user_profile,
            from_user_type=previous_user_type,
            to_user_type=new_user_type
        )

        return user_profile